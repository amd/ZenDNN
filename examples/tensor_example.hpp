/********************************************************************************
# * Copyright (c) 2023-2024 Advanced Micro Devices, Inc. All rights reserved.
# *
# * Licensed under the Apache License, Version 2.0 (the "License");
# * you may not use this file except in compliance with the License.
# * You may obtain a copy of the License at
# *
# *     http://www.apache.org/licenses/LICENSE-2.0
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and
# * limitations under the License.
# *******************************************************************************/

#include <memory>
#include <iostream>
#include <optional>
#include <cstdint>

#include "zendnnl.hpp"
#include "example_utils.hpp"

#define  OK                 (0)
#define  NOT_OK             (1)
#define  MATMUL_ROWS        100
#define  MATMUL_COLS        100
#define  MATMUL_DEPTH       5
#define  MATMUL_STRIDE_COLS 128
#define  ALIGNMENT_BOUNDARY 256

namespace zendnnl {
namespace examples {

/** @fn tensor_unaligned_allocation_example
 *  @brief Demonstrates unaligned tensor buffer allocation.
 *
 *  Tensor buffer allocation can be unaligned or aligned to a memory boundary.
 *  This example demonstrates unaligned allocation.
 */
int tensor_unaligned_allocation_example();

/** @fn tensor_aligned_allocation_example
 *  @brief Demonstrates memory aligned tensor buffer allocation.
 *
 *  Tensor buffer allocation can be unaligned or aligned to a memory boundary.
 *  This example demonstrates aligned allocation.
 */
int tensor_aligned_allocation_example();

/** @fn tensor_strided_aligned_allocation_example
 *  @brief Demonstrates strided tensor buffer allocation.
 *
 *  A strided tensor is a tensor with stride in any dimension is greater
 *  than its size. Such a tensor requires bot size and stride information.
 *  This example demonstrates strided tensor allocation.
 */
int tensor_strided_aligned_allocation_example();

/** @fn tensor_copy_and_compare_example
 *  @brief Demonstrates tensor copy and compare.
 *
 *  Tensor copy is a shallow copy where tensor meta information and
 *  quantization information is copied, but storage is shared. Copy
 *  increases reference count of storage.
 *
 *  Tensor comparison is done using hash generated by the tensors. Hash
 *  generation is done using meta information, quantization information
 *  and pointer to memory buffer. Two tensors are equal if their hash is equal.
 */
int tensor_copy_and_compare_example();

/** @fn tensor_move_and_refcount_example
 *  @brief Demonstrates tensor move and reference count on tensor storage.
 *
 *  Tensor move operation shifts tensor information to the target tensor, and
 *  resets source tensor. Reference count of tensor storage does not increase
 *  in move operation.
 */
int tensor_move_and_refcount_example();

/** @fn tensor_constness_example
 *  @brief Demonstrates how a tensor can be made const.
 *
 *  A tensor is a const tensor if its unsafe pointer can not be taken out.
 *  Only a const pointer to its data can be taken out and it can be used
 *  only for reading the data.
 */
int tensor_constness_example();

/** @fn tensor_create_alike_example
 *  @brief Demonstrates how a tensor os same tensor options can be created.
 *
 *  This is demonstration of how tensor options of a tensor can be used to
 *  create another tensor.
 */
int tensor_create_alike_example();

} //examples
} //zendnnl
